"use strict";(()=>{var e={};e.id=5469,e.ids=[5469],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8178:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>D,patchFetch:()=>y,requestAsyncStorage:()=>w,routeModule:()=>m,serverHooks:()=>h,staticGenerationAsyncStorage:()=>c});var r={};a.r(r),a.d(r,{DELETE:()=>p,POST:()=>d,dynamic:()=>u});var n=a(3277),i=a(5265),s=a(5356),o=a(7076),l=a(6059);let u="force-dynamic";async function d(e,{params:t}){try{let a,r,n;let{id:i}=t,{view:s,year:u,month:d,amount:p,notes:m}=await e.json();if(!s||!u)return o.NextResponse.json({error:"View and year are required"},{status:400});if("monthly"===s&&!d)return o.NextResponse.json({error:"Month is required for monthly view"},{status:400});let w=await l._.bill.findUnique({where:{id:i}});if(!w)return o.NextResponse.json({error:"Bill not found"},{status:404});if("monthly"===s&&null!==d)a=new Date(u,d-1,new Date(w.nextDueDate).getDate());else{let e=new Date(w.nextDueDate);a=new Date(u,e.getMonth(),e.getDate())}if("monthly"===s&&null!==d?(r=new Date(u,d-1,1),n=new Date(u,d,0,23,59,59)):(r=new Date(u,0,1),n=new Date(u,11,31,23,59,59)),await l._.billInstance.findFirst({where:{billId:i,status:"PAID",paidDate:{gte:r,lte:n}}}))return o.NextResponse.json({error:"Bill already marked as paid for this period"},{status:400});let c=await l._.billInstance.findFirst({where:{billId:i,dueDate:a}});return c=c?await l._.billInstance.update({where:{id:c.id},data:{status:"PAID",paidDate:new Date,notes:m,amount:p||w.amount}}):await l._.billInstance.create({data:{billId:i,dueDate:a,amount:p||w.amount,status:"PAID",paidDate:new Date,notes:m}}),o.NextResponse.json(c,{status:200})}catch(e){return console.error("Error marking bill as paid:",e),o.NextResponse.json({error:"Failed to mark bill as paid"},{status:500})}}async function p(e,{params:t}){try{let a,r;let{id:n}=t,{searchParams:i}=new URL(e.url),s=i.get("view"),u=i.get("year")?parseInt(i.get("year")):null,d=i.get("month")?parseInt(i.get("month")):null;if(!s||!u)return o.NextResponse.json({error:"View and year are required"},{status:400});if("monthly"===s&&!d)return o.NextResponse.json({error:"Month is required for monthly view"},{status:400});"monthly"===s&&null!==d?(a=new Date(u,d-1,1),r=new Date(u,d,0,23,59,59)):(a=new Date(u,0,1),r=new Date(u,11,31,23,59,59));let p=await l._.billInstance.findFirst({where:{billId:n,status:"PAID",paidDate:{gte:a,lte:r}}});if(!p)return o.NextResponse.json({error:"No paid instance found for this period"},{status:404});let m=await l._.billInstance.update({where:{id:p.id},data:{status:"PENDING",paidDate:null}});return o.NextResponse.json(m,{status:200})}catch(e){return console.error("Error unmarking bill payment:",e),o.NextResponse.json({error:"Failed to unmark bill payment"},{status:500})}}let m=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/bills/[id]/payment/route",pathname:"/api/bills/[id]/payment",filename:"route",bundlePath:"app/api/bills/[id]/payment/route"},resolvedPagePath:"/home/ubuntu/moneymitra/app/app/api/bills/[id]/payment/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:w,staticGenerationAsyncStorage:c,serverHooks:h}=m,D="/api/bills/[id]/payment/route";function y(){return(0,s.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:c})}},6059:(e,t,a)=>{a.d(t,{_:()=>n,db:()=>i});var r=a(3524);let n=globalThis.prisma??new r.PrismaClient,i=n}};var t=require("../../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[5942,3786],()=>a(8178));module.exports=r})();