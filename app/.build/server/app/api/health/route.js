"use strict";(()=>{var e={};e.id=8829,e.ids=[8829],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4387:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>v,patchFetch:()=>g,requestAsyncStorage:()=>d,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var n={};a.r(n),a.d(n,{GET:()=>c,dynamic:()=>p});var r=a(921),o=a(7380),i=a(4185),s=a(3878),u=a(2334);let p="force-dynamic";async function c(){try{await u._.$queryRaw`SELECT 1`;let[e,t,a,n,r,o]=await Promise.all([u._.transaction.count(),u._.category.count(),u._.bill.count(),u._.financialGoal.count(),u._.loan.count(),u._.investment.count()]);return s.NextResponse.json({status:"healthy",timestamp:new Date().toISOString(),version:"1.0.0",database:{status:"connected",stats:{transactions:e,categories:t,bills:a,goals:n,loans:r,investments:o}},environment:"production",uptime:process.uptime()})}catch(e){return console.error("Health check failed:",e),s.NextResponse.json({status:"unhealthy",timestamp:new Date().toISOString(),error:"Database connection failed",environment:"production"},{status:503})}}let l=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/health/route",pathname:"/api/health",filename:"route",bundlePath:"app/api/health/route"},resolvedPagePath:"/home/ubuntu/moneymitra/app/app/api/health/route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:h}=l,v="/api/health/route";function g(){return(0,i.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},2334:(e,t,a)=>{a.d(t,{db:()=>o,_:()=>r});let n=require("@prisma/client"),r=globalThis.prisma??new n.PrismaClient,o=r}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),n=t.X(0,[5923,7146],()=>a(4387));module.exports=n})();