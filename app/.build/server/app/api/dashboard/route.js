"use strict";(()=>{var e={};e.id=3707,e.ids=[3707],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8845:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>y,patchFetch:()=>w,requestAsyncStorage:()=>g,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>p});var n={};a.r(n),a.d(n,{GET:()=>d,dynamic:()=>c});var r=a(921),o=a(7380),u=a(4185),s=a(3878),i=a(3524);let c="force-dynamic",m=new i.PrismaClient;async function d(e){try{console.log("Dashboard API called, testing Prisma connection...");let e=await m.transaction.count();console.log("Transaction count:",e);let t=new Date,a=new Date(t.getFullYear(),t.getMonth(),1),n=new Date(t.getFullYear(),t.getMonth()+1,0),r=new Date(t.getFullYear(),t.getMonth()-1,1),o=new Date(t.getFullYear(),t.getMonth(),0),u=await m.transaction.aggregate({where:{type:"INCOME",date:{gte:a,lte:n}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),i=await m.transaction.aggregate({where:{type:"EXPENSE",date:{gte:a,lte:n}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),c=await m.transaction.aggregate({where:{type:"INCOME",date:{gte:r,lte:o}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),d=await m.transaction.aggregate({where:{type:"EXPENSE",date:{gte:r,lte:o}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),l=await m.investment.aggregate({_sum:{currentValue:!0}}).catch(()=>({_sum:{currentValue:0}})),g=await m.loan.aggregate({_sum:{currentBalance:!0}}).catch(()=>({_sum:{currentBalance:0}})),p=await m.transaction.findMany({take:5,orderBy:{date:"desc"},include:{category:!0}}).catch(()=>[]),h=await m.financialGoal.findMany({take:3,orderBy:{targetAmount:"desc"},where:{status:"ACTIVE"}}).catch(()=>[]),y=await m.loan.findMany({orderBy:{endDate:"asc"}}).catch(()=>[]),w=await m.investment.findMany({orderBy:{currentValue:"desc"}}).catch(()=>[]),v=await m.bill.findMany({where:{nextDueDate:{gte:t,lte:new Date(t.getTime()+2592e6)}},orderBy:{nextDueDate:"asc"},take:5}).catch(()=>[]),A=await m.transaction.groupBy({by:["categoryId"],where:{type:"EXPENSE",date:{gte:a,lte:n}},_sum:{amount:!0},orderBy:{_sum:{amount:"desc"}},take:5}).catch(()=>[]),x=u._sum.amount||0,_=i._sum.amount||0,f=c._sum.amount||0,D=d._sum.amount||0,b=D>0?(_-D)/D*100:0,E=l._sum.currentValue||0,I=g._sum.currentBalance||0,M=A.map(e=>e.categoryId).filter(Boolean),B=(M.length>0?await m.category.findMany({where:{id:{in:M}}}).catch(()=>[]):[]).reduce((e,t)=>(e[t.id]=t.name,e),{}),P=A.map(e=>({categoryName:e.categoryId?B[e.categoryId]||"Unknown":"Uncategorized",amount:e._sum.amount||0})),k=x>0?(x-_)/x*100:0,F=[];return k>20?F.push({type:"positive",message:`Great job! You're saving ${k.toFixed(1)}% of your income this month.`}):k<10&&x>0&&F.push({type:"warning",message:`Consider increasing your savings rate. Currently at ${k.toFixed(1)}%.`}),b>20&&F.push({type:"warning",message:`Your expenses increased by ${b.toFixed(1)}% compared to last month.`}),v.length>0&&F.push({type:"info",message:`You have ${v.length} bills due in the next 30 days.`}),s.NextResponse.json({financialOverview:{netWorth:E-I,currentMonthIncome:x,currentMonthExpenses:_,incomeTrend:f>0?(x-f)/f*100:0,expenseTrend:b,savingsRate:k},goals:h.map(e=>({id:e.id,name:e.name,targetAmount:e.targetAmount,currentAmount:e.currentAmount,progress:e.currentAmount/e.targetAmount*100,remainingAmount:e.targetAmount-e.currentAmount})),loans:y.map(e=>({id:e.id,name:e.name,totalAmount:e.principalAmount,outstandingAmount:e.currentBalance,progress:(e.principalAmount-e.currentBalance)/e.principalAmount*100,nextDueDate:e.endDate,emiAmount:e.emiAmount})),investments:{totalValue:E,investments:w.map(e=>({id:e.id,name:e.name,type:e.assetClass,currentValue:e.currentValue,investedAmount:e.totalInvested,gainLoss:e.currentValue-e.totalInvested,gainLossPercentage:e.totalInvested>0?(e.currentValue-e.totalInvested)/e.totalInvested*100:0}))},upcomingItems:v.map(e=>({id:e.id,name:e.name,amount:e.amount,dueDate:e.nextDueDate,type:"bill"})),recentActivity:p.map(e=>({id:e.id,description:e.description,amount:e.amount,type:e.type,date:e.date,categoryName:e.category?.name||"Uncategorized"})),categoryBreakdown:P,insights:F})}catch(e){return console.error("Dashboard API error:",e),s.NextResponse.json({error:"Failed to fetch dashboard data",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let l=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/dashboard/route",pathname:"/api/dashboard",filename:"route",bundlePath:"app/api/dashboard/route"},resolvedPagePath:"/home/ubuntu/moneymitra/app/app/api/dashboard/route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:g,staticGenerationAsyncStorage:p,serverHooks:h}=l,y="/api/dashboard/route";function w(){return(0,u.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:p})}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),n=t.X(0,[5923,7146],()=>a(8845));module.exports=n})();