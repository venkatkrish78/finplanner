"use strict";(()=>{var e={};e.id=3707,e.ids=[3707],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8845:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>y,patchFetch:()=>v,requestAsyncStorage:()=>g,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>p});var n={};a.r(n),a.d(n,{GET:()=>d,dynamic:()=>c});var r=a(921),o=a(7380),s=a(4185),i=a(3878),u=a(3524);let c="force-dynamic",m=new u.PrismaClient;async function d(e){try{console.log("Dashboard API called, testing Prisma connection...");let e=await m.transaction.count();console.log("Transaction count:",e);let t=new Date,a=new Date(t.getFullYear(),t.getMonth(),1),n=new Date(t.getFullYear(),t.getMonth()+1,0),r=new Date(t.getFullYear(),t.getMonth()-1,1),o=new Date(t.getFullYear(),t.getMonth(),0),s=await m.transaction.aggregate({where:{type:"INCOME",date:{gte:a,lte:n}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),u=await m.transaction.aggregate({where:{type:"EXPENSE",date:{gte:a,lte:n}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),c=await m.transaction.aggregate({where:{type:"INCOME",date:{gte:r,lte:o}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),d=await m.transaction.aggregate({where:{type:"EXPENSE",date:{gte:r,lte:o}},_sum:{amount:!0}}).catch(()=>({_sum:{amount:0}})),l=await m.investment.aggregate({_sum:{currentValue:!0}}).catch(()=>({_sum:{currentValue:0}})),g=await m.loan.aggregate({_sum:{currentBalance:!0}}).catch(()=>({_sum:{currentBalance:0}})),p=await m.transaction.findMany({take:5,orderBy:{date:"desc"},include:{category:!0}}).catch(()=>[]),h=await m.financialGoal.findMany({take:3,orderBy:{targetAmount:"desc"},where:{status:"ACTIVE"},include:{contributions:!0,investmentLinks:{include:{investment:{select:{id:!0,name:!0,currentValue:!0,isActive:!0}}}},investments:{select:{id:!0,name:!0,currentValue:!0,isActive:!0}}}}).catch(()=>[]),y=await m.loan.findMany({orderBy:{endDate:"asc"}}).catch(()=>[]),v=await m.investment.findMany({orderBy:{currentValue:"desc"}}).catch(()=>[]),w=await m.bill.findMany({where:{nextDueDate:{gte:t,lte:new Date(t.getTime()+2592e6)}},orderBy:{nextDueDate:"asc"},take:5}).catch(()=>[]),A=await m.transaction.groupBy({by:["categoryId"],where:{type:"EXPENSE",date:{gte:a,lte:n}},_sum:{amount:!0},orderBy:{_sum:{amount:"desc"}},take:5}).catch(()=>[]),x=s._sum.amount||0,_=u._sum.amount||0,b=c._sum.amount||0,f=d._sum.amount||0,D=f>0?(_-f)/f*100:0,M=l._sum.currentValue||0,E=g._sum.currentBalance||0,I=A.map(e=>e.categoryId).filter(Boolean),B=(I.length>0?await m.category.findMany({where:{id:{in:I}}}).catch(()=>[]):[]).reduce((e,t)=>(e[t.id]=t.name,e),{}),P=A.map(e=>({categoryName:e.categoryId?B[e.categoryId]||"Unknown":"Uncategorized",amount:e._sum.amount||0})),V=x>0?(x-_)/x*100:0,k=h.map(e=>{let t=0;e.investmentLinks&&(t+=e.investmentLinks.reduce((e,t)=>t.investment&&t.investment.isActive?e+t.investment.currentValue*(t.allocation/100):e,0)),e.investments&&(t+=e.investments.reduce((e,t)=>t.isActive?e+t.currentValue:e,0));let a=e.contributions.reduce((e,t)=>e+t.amount,0),n=e.currentAmount+t+a,r=e.targetAmount>0?n/e.targetAmount*100:0,o=Math.max(0,e.targetAmount-n);return{id:e.id,name:e.name,targetAmount:e.targetAmount,currentAmount:n,progress:Math.min(100,r),remainingAmount:o,linkedInvestmentValue:t,totalContributions:a}}),F=[];return V>20?F.push({type:"positive",message:`Great job! You're saving ${V.toFixed(1)}% of your income this month.`}):V<10&&x>0&&F.push({type:"warning",message:`Consider increasing your savings rate. Currently at ${V.toFixed(1)}%.`}),D>20&&F.push({type:"warning",message:`Your expenses increased by ${D.toFixed(1)}% compared to last month.`}),w.length>0&&F.push({type:"info",message:`You have ${w.length} bills due in the next 30 days.`}),i.NextResponse.json({financialOverview:{netWorth:M-E,currentMonthIncome:x,currentMonthExpenses:_,incomeTrend:b>0?(x-b)/b*100:0,expenseTrend:D,savingsRate:V},goals:k,loans:y.map(e=>({id:e.id,name:e.name,totalAmount:e.principalAmount,outstandingAmount:e.currentBalance,progress:(e.principalAmount-e.currentBalance)/e.principalAmount*100,nextDueDate:e.endDate,emiAmount:e.emiAmount})),investments:{totalValue:M,investments:v.map(e=>({id:e.id,name:e.name,type:e.assetClass,currentValue:e.currentValue,investedAmount:e.totalInvested,gainLoss:e.currentValue-e.totalInvested,gainLossPercentage:e.totalInvested>0?(e.currentValue-e.totalInvested)/e.totalInvested*100:0}))},upcomingItems:w.map(e=>({id:e.id,name:e.name,amount:e.amount,dueDate:e.nextDueDate,type:"bill"})),recentActivity:p.map(e=>({id:e.id,description:e.description,amount:e.amount,type:e.type,date:e.date,categoryName:e.category?.name||"Uncategorized"})),categoryBreakdown:P,insights:F})}catch(e){return console.error("Dashboard API error:",e),i.NextResponse.json({error:"Failed to fetch dashboard data",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let l=new r.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/dashboard/route",pathname:"/api/dashboard",filename:"route",bundlePath:"app/api/dashboard/route"},resolvedPagePath:"/home/ubuntu/moneymitra/app/app/api/dashboard/route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:g,staticGenerationAsyncStorage:p,serverHooks:h}=l,y="/api/dashboard/route";function v(){return(0,s.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:p})}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),n=t.X(0,[5923,7146],()=>a(8845));module.exports=n})();