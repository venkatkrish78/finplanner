"use strict";(()=>{var e={};e.id=6355,e.ids=[6355],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8414:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>g,patchFetch:()=>x,requestAsyncStorage:()=>c,routeModule:()=>d,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{GET:()=>p,dynamic:()=>l});var n=a(921),s=a(7380),o=a(4185),i=a(3878),u=a(2334);let l="force-dynamic";async function p(){try{let[e,t]=await Promise.all([u._.loan.findMany({include:{payments:!0}}),u._.loanPayment.aggregate({_sum:{interestPaid:!0}})]),a=e.length,r=e.reduce((e,t)=>e+t.currentBalance,0),n=e.reduce((e,t)=>e+t.emiAmount,0),s=t._sum.interestPaid||0,o=e.reduce((e,t)=>e+t.interestRate,0),l=e.length>0?o/e.length:0;return i.NextResponse.json({totalLoans:a,totalDebt:r,monthlyEMI:n,totalInterestPaid:s,averageInterestRate:Math.round(100*l)/100})}catch(e){return console.error("Error fetching loan stats:",e),i.NextResponse.json({error:"Failed to fetch loan stats"},{status:500})}}let d=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/loans/stats/route",pathname:"/api/loans/stats",filename:"route",bundlePath:"app/api/loans/stats/route"},resolvedPagePath:"/home/ubuntu/moneymitra/app/app/api/loans/stats/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:h}=d,g="/api/loans/stats/route";function x(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},2334:(e,t,a)=>{a.d(t,{db:()=>s,_:()=>n});let r=require("@prisma/client"),n=globalThis.prisma??new r.PrismaClient,s=n}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[5923,7146],()=>a(8414));module.exports=r})();